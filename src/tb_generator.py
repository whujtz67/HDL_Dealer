from common import ArgParser
from text_helper import *
from rtl_info import *
import time

class TBGenerator:
	def __init__(self, args:ArgParser, all_infos: ALLInfo) -> None:
		self.args = args
		self.text_helper = TextHelper(self.args)
		self.all_info = all_infos
		self.macros   = []

	# -------------------------------
	# tb gen main
	# -------------------------------
	def tb_gen_top(self):
		# self.text_helper.write_file("`timescale 1ns/1ns\n")
		self.text_helper.write_comment("testbench generated by HDL DEALER", level = CmtType.HEAD)

# 		self.text_helper.write_file( \
# """
# // include VIP
# `include "svt_chi_port_defines.svi"
# `include "cust_svt_amba_system_configuration_param.sv"

# // include intf
# `include "coupledL2_if.svi"
# """)

		# self.text_helper.write_comment("macro define check", level = CmtType.CHAPTER)
		# self.text_helper.write_file(self.text_helper.macro_def_check)

		# self.text_helper.insert_content("tb_top.sv", 550 , "hello from xxx")

		# self.text_helper.gen_intf_conn()
		

		# signal declarations for TestTop instantiation
		self.signal_declares()

		# Initialization for signals input to TestTop
		self.sig_init()


		self.top_module_inst()

		for macro in self.macros:
			self.text_helper.write_macro(macro)

		# finish writing 
		self.text_helper.close_file()


	def signal_declares(self):
		sig_decl_lines = []
		for port in self.all_info.port_infos:
			if port.is_clock() or port.is_reset():
				continue
			if port.is_input():
				line = self.gen_signal_declare(port, "logic")
				sig_decl_lines.append(line)
			else:
				assert port.is_output()
				line = self.gen_signal_declare(port, "logic")
				sig_decl_lines.append(line)
		self.add_macro("TestTopSignalDeclaration", sig_decl_lines, "GUARD_TOP_SGN_DECL", True, "Signal Declaration for ports of TestTop")
				
	def gen_signal_declare(self, port, ptype):
		if port.is_array():
			if port.width == 1:
				tmp_str = f"{ptype:<20}"
				return f"\t{tmp_str} {port.name:<35}[0:{port.array_size - 1}];"
			else:
				tmp_str = f"{ptype} [{(port.width-1):<5}:0]"
				return f"\t{tmp_str:<20} {port.name:<35}[0:{port.array_size - 1}];"
		else:
			if port.width == 1:
				tmp_str = f"{ptype:<20}"
				return f"\t{tmp_str} {port.name:<35};"
			else:
				tmp_str = f"{ptype} [{(port.width-1):<5}:0]"
				return f"\t{tmp_str:<20} {port.name:<35};"
			
	def sig_init(self):
		array_cnt = 0
		sig_init_lines = ["initial begin", \
						 f'\t$display("[INFO] @%0t [%s:%d] hello from {self.args.tbtop_name}", $time, `__FILE__, `__LINE__);']
		for port in self.all_info.port_infos:
			if port.is_clock() or port.is_reset():
				continue
			if port.is_input():
				## port is array
				if port.is_array():
					index_var = f"i_{array_cnt}"
					# initialize each dimension
					sig_init_lines.append(f"\tfor({index_var} = 0; {index_var} < {port.array_size}; {index_var}++) begin")
					for i in range(port.array_size):
						sig_init_lines.append(f"\t\t{port.name}[{i}] = 0;")
					sig_init_lines.append(f"\tend")
					array_cnt += 1
				## port is not array
				else:
					line = f"    \t{port.name:<{self.all_info.port_max_len}} = 0;"
					sig_init_lines.append(line)

		sig_init_lines.append("end")
		self.add_macro("SignalInit", sig_init_lines, "GUARD_SIG_INIT", True, "Init for signals input to TestTop")

	def top_module_inst(self):
		top_inst_lines = [f"{self.args.expect_top} u_{self.args.expect_top} ("]
		for port in self.all_info.port_infos:
			top_inst_lines.append(f"\t.{port.name:<{self.all_info.port_max_len + 1}}({port.name:<35}),")
		# get rid of the "," of the last port
		top_inst_lines[-1] = top_inst_lines[-1][:-1]
		top_inst_lines.append(f"); ")

		self.add_macro("TopModuleInstantiate", top_inst_lines, "GUARD_TOP_MODULE_INST", True, "TOP module instantiate (DUT)")


			
	def add_macro(self, macro, body, incl_guard_macro = None, multi_line = False, cmt = None):
		mcr_info = MacroInfo(macro, body, incl_guard_macro, multi_line, cmt)
		self.macros.append(mcr_info)
